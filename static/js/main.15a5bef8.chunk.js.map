{"version":3,"sources":["components/Stars/Star/Star.jsx","components/Stars/Stars.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Star","fill","height","viewBox","width","xmlns","d","Stars","count","Number","isNaN","generateIds","Array","map","star","_id","shortid","generate","value","className","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMASeA,EAPF,kBACT,yBAAKC,KAAK,UAAUC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BACjE,0BAAMC,EAAE,4EACR,0BAAMA,EAAE,gBAAgBL,KAAK,WCC/BM,G,MAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACb,GAAIA,EAAQ,GAAKA,EAAQ,GAAuB,kBAAVA,GAAsBC,OAAOC,MAAMF,GACrE,OAAO,KAGX,IACMG,EADQ,IAAIC,MAAMJ,GAAOP,KAAK,MACVY,KAAI,SAAAC,GAC1B,MAAO,CACHC,IAAKC,IAAQC,WACbC,MAAOJ,MAIf,OACI,wBAAIK,UAAU,mBAENR,EAAYE,KAAI,YAAc,IAAXE,EAAU,EAAVA,IACf,OACI,wBAAIK,IAAML,GACN,kBAAC,EAAD,aAS5BR,EAAMc,aAAe,CACjBb,MAAO,GAOID,QCnCAe,EAJH,kBACR,kBAAC,EAAD,CAAOd,MAAQ,KCQCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.15a5bef8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Star = () => (\r\n    <svg fill=\"#D3BCA2\" height=\"28\" viewBox=\"0 0 18 18\" width=\"28\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M9 11.3l3.71 2.7-1.42-4.36L15 7h-4.55L9 2.5 7.55 7H3l3.71 2.64L5.29 14z\"/>\r\n        <path d=\"M0 0h18v18H0z\" fill=\"none\"/>\r\n    </svg>\r\n);\r\n\r\nexport default Star;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport Star from './Star/Star';\r\nimport './stars.css';\r\n\r\nconst Stars = ({ count }) => {\r\n    if (count < 1 || count > 5 || (typeof count !== 'number' && Number.isNaN(count))) {\r\n        return null;\r\n    }\r\n\r\n    const stars = new Array(count).fill(null);\r\n    const generateIds = stars.map(star => {\r\n        return {\r\n            _id: shortid.generate(),\r\n            value: star\r\n        };\r\n    });\r\n\r\n    return (\r\n        <ul className=\"card-body-stars\">\r\n            {\r\n                generateIds.map(({ _id }) => {\r\n                    return (\r\n                        <li key={ _id }>\r\n                            <Star />\r\n                        </li>\r\n                    );\r\n                })\r\n            }\r\n        </ul>\r\n    );\r\n};\r\n\r\nStars.defaultProps = {\r\n    count: 0\r\n};\r\n\r\nStars.propTypes = {\r\n    count: PropTypes.number\r\n};\r\n\r\nexport default Stars;\r\n\r\n","import React from 'react';\r\nimport Stars from './components/Stars/Stars';\r\n\r\nconst App = () => (\r\n    <Stars count={ 4 } />\r\n);\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}